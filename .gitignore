import json
import argparse
import asyncio
import aiohttp
import dns.resolver
from datetime import datetime
from typing import Dict, List
import ssl
import socket

class SubdomainScanner:
    def __init__(self, config: dict):
        self.config = config
        self.hedef_domain = config['hedef_domain']
        self.thread_sayısı = config.get('thread_sayısı', 10)
        self.zaman_aşımı = config.get('zaman_aşımı', 5)
        self.başlangıç_zamanı = datetime.now()

    async def tara(self) -> dict:
        try:
            subdomains = []
            aktif_sayısı = 0
            
            # DNS taraması
            if self.config['tarama_modu'] in ['tam', 'aktif']:
                dns_sonuçları = await self.dns_tara()
                subdomains.extend(dns_sonuçları)
            
            # Aktif subdomainleri kontrol et
            for subdomain in subdomains:
                if subdomain['durum']['aktif']:
                    aktif_sayısı += 1

            bitiş_zamanı = datetime.now()
            tarama_süresi = (bitiş_zamanı - self.başlangıç_zamanı).total_seconds()

            return {
                "sonuç": {
                    "durum": "başarılı",
                    "veri": {
                        "hedef_domain": self.hedef_domain,
                        "tarama_tarihi": self.başlangıç_zamanı.isoformat(),
                        "bulunan_subdomainler": subdomains,
                        "istatistikler": {
                            "toplam_bulunan": len(subdomains),
                            "aktif_olanlar": aktif_sayısı,
                            "tarama_süresi": tarama_süresi
                        }
                    },
                    "hata_mesajı": None
                }
            }
        except Exception as e:
            return {
                "sonuç": {
                    "durum": "başarısız",
                    "veri": {},
                    "hata_mesajı": str(e)
                }
            }

    async def dns_tara(self) -> List[Dict]:
        subdomains = []
        wordlist = ["www", "mail", "ftp", "admin", "blog", "dev", "test"]
        
        for word in wordlist:
            subdomain = f"{word}.{self.hedef_domain}"
            try:
                answers = dns.resolver.resolve(subdomain, 'A')
                ip_adresleri = [str(answer) for answer in answers]
                
                # HTTP kontrolü
                is_active = await self.http_kontrol(subdomain)
                
                subdomains.append({
                    "subdomain": subdomain,
                    "ip_adresleri": ip_adresleri,
                    "durum": {
                        "aktif": is_active,
                        "http_durumu": 200 if is_active else 0
                    },
                    "bulunma_kaynağı": "DNS",
                    "ssl_bilgisi": await self.ssl_kontrol(subdomain)
                })
            except:
                continue
                
        return subdomains

    async def http_kontrol(self, subdomain: str) -> bool:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://{subdomain}", timeout=self.zaman_aşımı) as response:
                    return response.status == 200
        except:
            return False

    async def ssl_kontrol(self, subdomain: str) -> Dict:
        try:
            context = ssl.create_default_context()
            with socket.create_connection((subdomain, 443), timeout=self.zaman_aşımı) as sock:
                with context.wrap_socket(sock, server_hostname=subdomain) as ssock:
                    cert = ssock.getpeercert()
                    return {
                        "var_mı": True,
                        "geçerlilik_tarihi": cert['notAfter']
                    }
        except:
            return {
                "var_mı": False,
                "geçerlilik_tarihi": None
            }

def main():
    # Komut satırı argümanlarını ayarla
    parser = argparse.ArgumentParser(description='Subdomain Keşif Aracı')
    parser.add_argument('--domain', required=True, help='Hedef domain')
    parser.add_argument('--mod', default='tam', choices=['pasif', 'aktif', 'tam'], help='Tarama modu')
    parser.add_argument('--thread', type=int, default=10, help='Thread sayısı')
    parser.add_argument('--timeout', type=int, default=5, help='Zaman aşımı süresi')
    args = parser.parse_args()

    # Konfigürasyon oluştur
    config = {
        "hedef_domain": args.domain,
        "tarama_modu": args.mod,
        "thread_sayısı": args.thread,
        "zaman_aşımı": args.timeout
    }

    # Tarayıcıyı başlat
    scanner = SubdomainScanner(config)
    sonuç = asyncio.run(scanner.tara())
    
    # Sonuçları yazdır
    print(json.dumps(sonuç, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main()
